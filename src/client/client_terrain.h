#ifndef _CLIENT_TERRAIN_H_
#define _CLIENT_TERRAIN_H_

#include <stdbool.h>
#include "client/model.h"
#include "terrain.h"
#include "types.h"

typedef enum {
	CHUNK_RECIEVING, // currently deserializing
	CHUNK_FRESH,     // first deserialisation finished, not processed by sync thread yet
	CHUNK_READY,     // ready to use and processed by sync thread
} TerrainChunkState;

typedef struct {
	TerrainChunkState state; // keep track of the deserialisation and sync processing state
	bool queue;              // whether the chunk is in meshgen queue
	u64 sync;                // keep track of when a chunk was synced the last time (used to detect when a chunk got out of and then back into load distance)
	Model *model;            // generated by terrain_gfx
	bool empty;              // whether the chunk is all air
} TerrainChunkMeta;

extern Terrain *client_terrain;

void client_terrain_init();                              // called on startup
void client_terrain_deinit();                            // called on shutdown
void client_terrain_set_load_distance(u32 dist);         // update load distance
u32 client_terrain_get_load_distance();                  // return load distance
void client_terrain_start();                             // start meshgen and sync threads
void client_terrain_stop();                              // stop meshgen and sync threads
void client_terrain_chunk_received(TerrainChunk *chunk); // called when a chunk was recieved from server
void client_terrain_meshgen_task(TerrainChunk *chunk);   // enqueue chunk to mesh update queue

#endif
